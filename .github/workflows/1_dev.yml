name: 1. Development Build and Testing
on:
  push:
    branches:
      - dev
    paths-ignore:
      - '**.md'

jobs:

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.18.x
      - uses: actions/setup-node@v1
        with:
          node-version: 16.14.0

      - name: Set Version
        run: |
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV
        shell: bash

      - name: Install Global Dependencies
        run: npm install -g yarn sass cross-env mjml

      - name: Download Frontend Dependencies
        working-directory: ./frontend
        run: yarn

      - name: Download Go mods
        run: |
          go install github.com/GeertJohan/go.rice/rice@latest
          go mod download
          go mod verify
          go get -t github.com/wellington/go-libsass
          make test-deps

      - name: Build Frontend Statping
        env:
          VERSION: ${{ env.VERSION }}
          COMMIT: ${{ github.sha }}
        run: |
          go get -t github.com/gomarkdown/markdown
          go get -t github.com/tdewolff/minify/v2
          make clean generate
          make compile

      - name: Upload Compiled Frontend (rice-box.go)
        uses: actions/upload-artifact@v1
        with:
          name: static-rice-box
          path: ./source

  build:
    needs: frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux]
        arch: [amd64]

    steps:
      - uses: actions/checkout@v2

      - name: Download Compiled Frontend (rice-box.go)
        uses: actions/download-artifact@v1
        with:
          name: static-rice-box
          path: ./source

      - name: Add GOBIN to PATH
        run: |
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV
        shell: bash

      - name: Set Linux Build Flags
        if: matrix.platform == 'linux'
        run: |
          echo "BUILD_FLAGS=-extldflags -static" >> $GITHUB_ENV
          echo "XGO_TAGS=netgo osusergo linux sqlite_omit_load_extension" >> $GITHUB_ENV
        shell: bash

      - name: Set MacOS (Darwin) Build Flags
        if: matrix.platform == 'darwin'
        run : |
          echo "XGO_TAGS=netgo osusergo darwin sqlite_omit_load_extension" >> $GITHUB_ENV
        shell: bash

      - name: Set Windows Build Flags
        if: matrix.platform == 'windows'
        run: |
          echo "BUILD_FLAGS=-extldflags -static -buildmode=exe" >> $GITHUB_ENV
          echo "XGO_TAGS=netgo osusergo sqlite_omit_load_extension" >> $GITHUB_ENV
        shell: bash

      - name: Build ${{ matrix.platform }}/${{ matrix.arch }}
        uses: crazy-max/ghaction-xgo@v1
        env:
          VERSION: ${{ env.VERSION }}
          COMMIT: ${{ github.sha }}
        with:
          xgo_version: latest
          go_version: 1.17.x
          dest: build
          prefix: statping
          targets: ${{ matrix.platform }}/${{ matrix.arch }}
          v: true
          x: true
          pkg: cmd
          buildmode: pie
          tags: ${{ env.XGO_TAGS }}
          ldflags: -s -w -X main.VERSION=${{ env.VERSION }} -X main.COMMIT=${{ env.COMMIT }} ${{ env.BUILD_FLAGS }}

      - name: Compress Linux Builds
        if: matrix.platform == 'linux'
        run: |
          cd build
          mv statping-linux-${{ matrix.arch }} statping
          chmod +x statping
          tar -czvf statping-linux-${{ matrix.arch }}.tar.gz statping
          rm -rf statping
          echo "compressed=statping-linux-${{ matrix.arch }}.tar.gz" >> $GITHUB_ENV

      - name: Compress Windows Builds
        if: matrix.platform == 'windows'
        run: |
          cd build
          mv statping-windows-${{ matrix.arch }}.exe statping.exe
          chmod +x statping.exe
          zip statping-windows-${{ matrix.arch }}.zip statping.exe
          rm -rf statping.exe
          echo "compressed=statping-windows-${{ matrix.arch }}.zip" >> $GITHUB_ENV

      - name: Compress MacOS (Darwin) Builds
        if: matrix.platform == 'darwin'
        run: |
          cd build
          mv statping-darwin-${{ matrix.arch }} statping
          chmod +x statping
          tar -czvf statping-darwin-${{ matrix.arch }}.tar.gz *
          rm -rf statping
          echo "compressed=statping-darwin-${{ matrix.arch }}.tar.gz" >> $GITHUB_ENV

      - name: Upload Compiled Statping Binary
        uses: actions/upload-artifact@v1
        with:
          name: statping-${{ matrix.platform }}-${{ matrix.arch }}
          path: ./build
